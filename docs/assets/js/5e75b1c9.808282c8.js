"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[340],{7976:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>a});var o=t(7624),r=t(2172);const s={},c="Count Action",i={id:"examples/counter",title:"Count Action",description:"ViewModel\ub97c \ud65c\uc6a9\ud55c Counter \uc608\uc81c",source:"@site/docs/examples/counter.mdx",sourceDirName:"examples",slug:"/examples/counter",permalink:"/x-view-model/docs/examples/counter",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/x-view-model/docs/category/examples"},next:{title:"Login Flow",permalink:"/x-view-model/docs/examples/login"}},u={},a=[];function l(n){const e={blockquote:"blockquote",code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.M)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"count-action",children:"Count Action"}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"ViewModel\ub97c \ud65c\uc6a9\ud55c Counter \uc608\uc81c"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",metastring:"live noInline",live:!0,children:'const { registViewModel, useViewModel } = xvm;\r\ntype CounterState = {\r\n  count: number;\r\n};\r\n\r\ntype CounterAction = {\r\n  increase: (amount: number) => void;\r\n  decrease: (amount: number) => void;\r\n};\r\nconst vm = registViewModel<CounterState & CounterAction>({\r\n  count: 0,\r\n  increase: function (amount) {\r\n    this.count += amount;\r\n  },\r\n  decrease: function (amount) {\r\n    this.count -= amount;\r\n  },\r\n});\r\n\r\nconst CountAction = () => {\r\n  const [state, send] = useViewModel(vm, ["count"]);\r\n\r\n  return (\r\n    <div style={{ display: "flex", gap: "4px" }}>\r\n      <button onClick={() => send("increase", 1)}>+</button>\r\n      <button onClick={() => send("decrease", 1)}>-</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CountText = () => {\r\n  const [state, send] = useViewModel(vm, ["count"]);\r\n  return <p>Count {state.count}!</p>;\r\n};\r\nrender(\r\n  <>\r\n    <CountText />\r\n    <CountAction />\r\n  </>\r\n);\n'})})]})}function d(n={}){const{wrapper:e}={...(0,r.M)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}}}]);